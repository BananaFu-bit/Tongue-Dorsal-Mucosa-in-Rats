library(Seurat)
pbmcControl.data <- Read10X(data.dir = "Control.matrix")
pbmcControl<- CreateSeuratObject(counts =pbmcControl.data, project = "Control",min.cells = 3,min.features = 200)
pbmcCase.data <- Read10X(data.dir = "Case.matrix")
pbmcCase<- CreateSeuratObject(counts =pbmcCase.data, project = "Case",min.cells = 3,min.features = 200)
pbmc.combined <- merge(pbmcControl, y = pbmcCase, add.cell.ids = c("Control", "Case"), project = "ALL")
split.list <- SplitObject(pbmc.combined , split.by = "orig.ident")
pbmc.combined[["percent.mt"]]<-PercentageFeatureSet(pbmc.combined,pattern = "mt")
VlnPlot(pbmc.combined,features = c("nFeature_RNA","nCount_RNA","percent.mt"),ncol=3)
plot1 <- FeatureScatter(pbmc.combined, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc.combined, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc.combined <- subset(pbmc.combined, subset = nFeature_RNA > 200 & nFeature_RNA < 3000& percent.mt < 40)
hist(colSums(pbmc.combined$RNA@data),breaks = 100,main = "Total expression before normalisation",xlab = "Sum of expression")
pbmc.combined <- NormalizeData(pbmc.combined, normalization.method = "LogNormalize", scale.factor = 10000)
hist(colSums(pbmc.combined$RNA@data),breaks = 100, main = "Total expression after normalisation",xlab= "Sum of expression")  

pbmc.combined <- FindVariableFeatures(pbmc.combined, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(pbmc.combined), 10)
plot1 <- VariableFeaturePlot(pbmc.combined)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1

all.genes <- rownames(pbmc.combined)
pbmc.combined <- ScaleData(pbmc.combined, features = all.genes)

pbmc.combined<- RunPCA(pbmc.combined, features = VariableFeatures(object = pbmc.combined))
print(pbmc.combined[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc.combined, dims = 1:2, reduction = "pca")
DimPlot(pbmc.combined, reduction = "pca",split.by = 'ident')
DimHeatmap(pbmc.combined, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc.combined, dims = 1:15, cells = 500, balanced = TRUE)
pbmc.combined <- JackStraw(pbmc.combined, num.replicate = 100)
pbmc.combined <- ScoreJackStraw(pbmc.combined, dims = 1:20)
JackStrawPlot(pbmc.combined, dims = 1:20)
ElbowPlot(object=pbmc.combined,ndims=50)

pbmc.combined<- FindNeighbors(pbmc.combined, dims = 1:35)
pbmc.combined <- FindClusters(pbmc.combined, resolution = 0.6)
head(Idents(pbmc.combined), 5)

pbmc.combined <- RunUMAP(pbmc.combined, dims = 1:35)
DimPlot(pbmc.combined, reduction = "umap")
DimPlot(pbmc.combined, reduction = "umap",label = TRUE)

logFCfilter=0.25
adjPvalFilter=0.05
pbmc.combined.markers <- FindAllMarkers(pbmc.combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
library(tidyverse)
sig.markers=pbmc.combined.markers[(abs(as.numeric(as.vector(pbmc.combined.markers$avg_logFC)))>logFCfilter & as.numeric(as.vector(pbmc.combined.markers$p_val_adj))<adjPvalFilter),]
write.table(sig.markers,file="06.markers.xls",sep="\t",row.names=F,quote=F)
pbmc.combined.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_log2FC)
top40 <- pbmc.combined.markers %>% group_by(cluster) %>% top_n(n = 40, wt = avg_log2FC)
library(dplyr)
top10 <- pbmc.combined.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
DoHeatmap(pbmc.combined, features = top10$gene) + NoLegend()
ggsave('top_Heatmap.pdf',width = 87.50,height = 56.3)
table(pbmc.combined$orig.ident)
prop.table(table(Idents(pbmc.combined),pbmc.combined$orig.ident))
table(Idents(pbmc.combined), pbmc.combined$orig.ident)
FeaturePlot(pbmc.combined,features = "nCount_RNA")
DotPlot(pbmc.combined, features = unique(features)) + RotatedAxis()
VlnPlot(subset(pbmc.combined,Ptprc > 0 ), "Ptprc",group.by = "orig.ident")+ theme_bw()

View(cc.genes)
pbmc.combined<- NormalizeData(pbmc.combined)
g2m_genes <- cc.genes$g2m.genes 
g2m_genes <- CaseMatch(search=g2m_genes, match=rownames(pbmc.combined))
s_genes <- cc.genes$s.genes  
s_genes <- CaseMatch(search=s_genes, match=rownames(pbmc.combined))  

pbmc.combined <- CellCycleScoring(pbmc.combined, g2m.features=g2m_genes, s.features=s_genes)
colnames(pbmc.combined@meta.data)
table(pbmc.combined$Phase)

# Visualize the distribution of cell cycle markers across
RidgePlot(pbmc.combined, features = c("Mcm4", "Ttms", "Mcm5", "Mcm2"), ncol = 2) 
# Running a PCA on cell cycle genes reveals, unsurprisingly, that cells separate entirely by phase 
pbmc.combined <- RunPCA(pbmc.combined, features = c(s_genes, g2m_genes))
 
DimPlot(pbmc.combined,group.by = 'Phase')
DimPlot(pbmc.combined, reduction = "PCA", 
        group.by = "phenotype",
        shape.by = "Phase")
 
AverageExpression(pbmc.combined, features = "Ptprc",group.by = "orig.ident")
ptprc<-subset(pbmc.combined,features  = "Ptprc")

exprs <- data.frame(FetchData(object = pbmc.combined, vars.all = gene))
exprs$Barcod<-rownames(exprs)
ident<-data.frame()

ident<-data.frame(Barcod=names(pbmc.combined@ident),orig.ident=pbmc.combined@ident)

c<-merge(exprs,ident,by='Barcod')

c$orig.ident<-factor(c$orig.ident,levels=c(sort(unique(immune.combined@ident))))

# install.packages("ggpubr")
library(ggpubr)
p <- VlnPlot(pbmc.combined,'Krt4',group.by = 'orig.ident')
mycomparison <- list(c('Control','Case')) 
ggviolin(p$data, x = "ident", y = 'Krt4',
         color = "ident",add = 'mean_sd',fill = 'ident',add.params = list(color = "black")) + 
  stat_compare_means(comparisons = mycomparison,label = "p.format") + labs(x ='') +
  theme(axis.text.x.bottom = element_text(angle = 0,vjust = 0.5,hjust = 0.5)) + NoLegend()

View(p$data)
VlnPlot(pbmc.combined,features = "Gsdmd",split.by = "orig.ident",cols = c("lightcoral","light skyblue"))+aes(color=pbmc.combined$orig.ident)


ggplot(data,aes(x=group,y=value,color=group))+geom_point(position = 'jitter', 
  size = 1.5, show.legend = FALSE)+scale_color_manual(values = c("lightcoral","lightcoral"
  ,"lightcoral","lightcoral","lightcoral","lightcoral","lightcoral","lightcoral","lightcoral"
  ,"lightcoral","lightcoral","lightcoral","lightcoral","light skyblue","light skyblue",
  "light skyblue","light skyblue","light skyblue","light skyblue","light skyblue",
  "light skyblue","light skyblue","light skyblue","light skyblue","light skyblue",
  "light skyblue"))+theme(panel.grid = element_blank(), 
                          panel.background = element_blank(),axis.line = element_line
                          (color = 'black')) +
  labs(x = 'Group', y = 'Expression Level') +
  stat_summary(fun.y = mean, fun.ymin = mean, fun.ymax = mean, geom = 'crossbar', 
               width = 0.3, size = 0.3, color = 'black') +
  stat_summary(fun.data = function(x) median_hilow(x, 0.5),
               geom = 'errorbar', width = 0.25, size = 0.2, color = 'black')



AverageExpression(pbmc.combined, features = "Ptprc",group.by = "orig.ident")
data1= read.csv("data.csv", header = T, row.names = 1)

p1 <- pheatmap(data,  
               color = colorRampPalette(c('blue','white','red'))(100), 
               border_color = "black",  
               scale = "row", 
               cluster_rows = TRUE, 
               cluster_cols = FALSE, 
               legend = TRUE, 
               legend_breaks = c(-1, 0, 1),
               legend_labels = c("low","","heigh"),
               show_rownames = TRUE,
               show_colnames = TRUE, 
               fontsize = 8 )
